{"version":3,"sources":["actions/lobby.ts","actions/types/index.ts","pages/HomePage.tsx","pages/Lobby.tsx","reducers/lobbies.reducer.ts","reducers/index.ts","App.tsx","store.ts","serviceWorker.js","index.js"],"names":["corsProxy","url","a","fetch","fetchLobbies","dispatch","type","payload","Date","req","json","data","Container","styled","div","HomePage","currentGameID","useRouteMatch","params","id","lobbyStore","useSelector","state","lobbies","useState","gameID","setGameID","useDispatch","useEffect","columns","title","dataIndex","key","render","text","record","to","lobby_id","value","style","width","size","min","onChange","dashed","dataSource","Lobby","lobby","find","interval","setInterval","isLoading","clearInterval","description","name","sorter","b","rating","sortDirections","games","wins","pagination","players","filter","p","profile_id","initialState","rootReducer","combineReducers","action","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","configureStore","undefined","App","className","exact","path","border","subTitle","component","match","history","onBack","goBack","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9465353f.chunk.js","sourcesContent":["import {LOBBIES_FETCHED, LOBBIES_LOADING, STOP_LOBBIES_LOADING} from \"./types\";\n\nconst corsProxy = async (url:string) => {\n    return await fetch(`https://pascalraszyk.de/cors.php`);\n};\n\nexport const fetchLobbies = () => {\n    return async (dispatch:Function) => {\n        dispatch({\n            type: LOBBIES_LOADING,\n            payload: null\n        });\n        const req = await corsProxy(`https://aoe2.net/api/lobbies?game=aoe2de&qs=${+new Date()}`);\n        const data = await req.json();\n\n        dispatch({\n            type: LOBBIES_FETCHED,\n            payload: data\n        });\n        dispatch({\n            type: STOP_LOBBIES_LOADING,\n            payload: null\n        });\n    }\n};","export const LOBBIES_FETCHED = \"LOBBIES_FETCHED\";\nexport const LOBBIES_LOADING = \"LOBBIES_LOADING\";\nexport const STOP_LOBBIES_LOADING = \"STOP_LOBBIES_LOADING\";","import React, {useEffect, useState} from 'react';\nimport {Button, Divider, Icon, InputNumber, Table} from \"antd\";\nimport styled from 'styled-components';\nimport {Link} from \"react-router-dom\";\nimport {useRouteMatch} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchLobbies} from \"../actions/lobby\";\n\nexport const Container = styled.div`\n   padding: 30px 0;\n`;\n\n\n\nexport const HomePage = () => {\n    const match = useRouteMatch();\n    const currentGameID = (match.params as any).id;\n    const lobbyStore = useSelector((state: any) => state.lobbies);\n    const [gameID, setGameID] = useState(currentGameID);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchLobbies());\n    }, []);\n\n    const columns : any = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text:any) => `${text}`\n        },\n        {\n            title: 'Average ELO',\n            dataIndex: 'average_rating',\n            key: 'average_rating',\n            render: (text:any) => `${text}`,\n        },\n        {\n            title: 'Players',\n            dataIndex: 'num_players',\n            key: 'num_players',\n            render: (text:any) => `${text}`,\n        },\n        {\n            title: 'Max players',\n            dataIndex: 'num_slots',\n            key: 'max_slots',\n            render: (text:any) => `${text}`,\n        },\n        {\n            title: 'Server',\n            dataIndex: 'server',\n            key: 'server',\n            render: (text:any) => `${text}`,\n        },\n        {\n            title: \"Actions\",\n            dataIndex: \"actions\",\n            key: \"actions\",\n            render: (text:any, record:any) => (<>\n                <Link to={\"/lobby/\" + record.lobby_id}>View Players</Link>\n            </>)\n        }\n    ];\n\n\n    return (\n        <Container>\n            <h2>Enter Game ID</h2>\n            <div>\n                <InputNumber value={gameID} style={{width: \"400px\"}} size=\"large\" min={1} onChange={setGameID}/>\n            </div>\n            <br/>\n            <Link to={`/lobby/${gameID}`}><Button type=\"primary\">Next <Icon type=\"right\"/></Button></Link>\n            <Divider dashed />\n            <h2>All lobbies</h2>\n            <Table columns={columns} dataSource={lobbyStore.lobbies} />\n        </Container>\n    );\n}","import React, {useEffect} from 'react';\nimport {useRouteMatch} from \"react-router\";\nimport {fetchLobbies} from \"../actions/lobby\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Empty, Spin, Table} from \"antd\";\nimport {Container} from \"./HomePage\";\n\nexport const Lobby = () => {\n    const match = useRouteMatch();\n    const gameID = (match.params as any).id;\n    const lobbyStore = useSelector((state: any) => state.lobbies);\n    const lobby = lobbyStore.lobbies.find((lobby: any) => lobby.lobby_id === gameID);\n    const dispatch = useDispatch();\n\n    // main data fetching loop\n    useEffect(() => {\n        dispatch(fetchLobbies());\n        const interval = setInterval(() => {\n            if (lobbyStore.isLoading) {\n                return;\n            }\n\n            dispatch(fetchLobbies());\n        }, 5000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n    if (!lobby && lobbyStore.isLoading) {\n        return <Container><Spin/></Container>\n    }\n\n    if (!lobby && !lobbyStore.isLoading) {\n        return <Container><Empty description={<>\n            No lobby was found with GameID#{gameID}.\n            <br/>\n            This might happen sometimes when AOE2 does not update the lobby database. Please wait a few second or try\n            reopening the lobby. Sometimes AOE lobbies are broken, this happens if you choose a server that is too far away from your location.</>}/></Container>;\n    }\n\n    const columns: any = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text: any) => `${text}`,\n\n        },\n        {\n            title: 'ELO',\n            dataIndex: 'rating',\n            key: 'rating',\n            render: (text: any) => `${text || \"-\"}`,\n            sorter: (a: any, b: any) => a.rating > b.rating ? 1 : (a.rating < b.rating ? -1 : 0),\n            sortDirections: ['descend', 'ascend'],\n        },\n        {\n            title: 'Games',\n            dataIndex: 'games',\n            key: 'games',\n            render: (text: any) => `${text || \"-\"}`,\n            sorter: (a: any, b: any) => a.games > b.games ? 1 : (a.games < b.games ? -1 : 0),\n            sortDirections: ['descend', 'ascend'],\n        },\n        {\n            title: 'Wins',\n            dataIndex: 'wins',\n            key: 'wins',\n            render: (text: any) => `${text || \"-\"}`,\n            sorter: (a: any, b: any) => a.wins > b.wins ? 1 : (a.wins < b.wins ? -1 : 0),\n            sortDirections: ['descend', 'ascend'],\n        },\n        {\n            title: 'Streak',\n            dataIndex: 'streak',\n            key: 'streak',\n            render: (text: any) => `${text || \"-\"}`,\n            sorter: (a: any, b: any) => a.wins > b.wins ? 1 : (a.wins < b.wins ? -1 : 0),\n            sortDirections: ['descend', 'ascend'],\n        }\n    ];\n\n\n    return <Container>\n        <h1>{lobby.name} {lobbyStore.isLoading && <Spin />}</h1>\n        <Table columns={columns} pagination={false} dataSource={lobby.players.filter((p: any) => p.profile_id)}/>\n    </Container>\n};","import {LOBBIES_FETCHED, LOBBIES_LOADING, STOP_LOBBIES_LOADING} from \"../actions/types\";\n\nconst initialState = {\n    lobbies: [],\n    isLoading: false\n};\n\nexport default function(state = initialState,  action:any) {\n    switch (action.type) {\n        case LOBBIES_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            };\n        case LOBBIES_FETCHED:\n            return {\n                ...state,\n                lobbies: action.payload\n            };\n        case STOP_LOBBIES_LOADING:\n            return {\n                ...state,\n                isLoading: false\n            }\n    }\n    return state;\n}\n","/* eslint-disable */\nimport { combineReducers } from \"redux\";\nimport lobbiesReducer from \"./lobbies.reducer\";\n\nconst rootReducer = combineReducers({\n    lobbies: lobbiesReducer\n});\n\nexport default rootReducer;\n","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {PageHeader} from \"antd\";\nimport {Provider, useDispatch, useSelector, useStore} from \"react-redux\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link, HashRouter\n} from \"react-router-dom\";\nimport {Lobby} from \"./pages/Lobby\";\nimport {HomePage} from \"./pages/HomePage\";\nimport configureStore from \"./store\";\nimport {fetchLobbies} from \"./actions/lobby\";\n\nexport const store = configureStore(undefined);\n\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <HashRouter>\n                    <Route exact path=\"/\">\n                        <PageHeader\n                            style={{\n                                border: '1px solid rgb(235, 237, 240)',\n                            }}\n                            title=\"AOE2 Lobby\"\n                            subTitle=\"ELO insights\"\n                        />\n                        <HomePage/>\n                    </Route>\n                    <Route path=\"/lobby/:id\" component={({match, history}:any) => {\n                        return <>\n                            <PageHeader\n                                style={{\n                                    border: '1px solid rgb(235, 237, 240)',\n                                }}\n                                onBack={() => {\n                                    history.goBack()\n                                }}\n                                title=\"AOE2 Lobby\"\n                                subTitle={`#${match.params.id}`}\n                            />\n                            <Lobby/>\n                        </>\n                    }}/>\n                </HashRouter>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, createStore, compose} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from './reducers'\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nexport default function configureStore(preloadedState:any) {\n    const middlewares = [thunkMiddleware];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n    const enhancers: any = [middlewareEnhancer];\n    const composedEnhancers = composeWithDevTools(...enhancers);\n    const store = createStore(rootReducer, preloadedState, composedEnhancers);\n    return store\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}